# import the necessary packages
#opencv 2.4.13
import argparse
import datetime
import time
import cv2
import urllib
import numpy as np
import os
import serial
import time
import sys
import subprocess
port = serial.Serial("/dev/ttyAMA0",baudrate=9600,timeout=0.5) 
backgroundSubtractor = cv2.BackgroundSubtractorMOG()
kk=0
height=400
width=500
cnt=0;
time.sleep(1);
webcam = cv2.VideoCapture(0)  ### for live change the id to be zero
xchg=0
firstFrame = None
ttf=0
centerprevX=0
secondsfin=0
while True:
##        rcv = port.read(12)
##        print(rcv)
##        if(("270013746626" in str(rcv))or("270012DA09E6" in str(rcv))):
##                print("RFID matching")
##                break
##        else:
##                print("waiting for rfid")
##        imgPath=urllib.urlopen(url)
##        imgNp=np.array(bytearray(imgPath.read()),dtype=np.uint8)
##        frame=cv2.imdecode(imgNp,-1)
        startt = time.time()
        fr,frame=webcam.read();
        text = "Unoccupied"

        # resize the frame, convert it to grayscale, and blur it
##	frame = cv2.resize(frame,(960, 540), interpolation = cv2.INTER_CUBIC)
##        print np.shape(frame)
        gray1 = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        gray = cv2.GaussianBlur(gray1, (21, 21), 0)
##        gray=gray1[100:,120:320];
##        frame=frame[100:,120:320];
        # if the first frame is None, initialize it
        if firstFrame is None:
                firstFrame = gray
                backgroundSubtractor.apply(firstFrame, learningRate=1)
                continue

        # compute the absolute difference between the current frame and
        # first frame
        frameDelta = backgroundSubtractor.apply(gray, learningRate=0)
##        frameDelta = cv2.absdiff(firstFrame, gray)
##        thresh = cv2.threshold(frameDelta, 80, 255, cv2.THRESH_BINARY)[1]

        # dilate the thresholded image to fill in holes, then find contours
        # on thresholded image
        kernel = np.ones((5,3),np.uint8)
        thresh = cv2.dilate(frameDelta, kernel, iterations=10)
        thresh = cv2.morphologyEx(thresh, cv2.MORPH_CLOSE, kernel)
##        print thresh
        cnts =cv2.findContours(thresh, cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)[-2]
        cnts = sorted(cnts, key = cv2.contourArea, reverse = True)[:10]
##        print len(cnts)
        # loop over the contours
        for c in cnts:
                (x, y, w, h) = cv2.boundingRect(c)
                if cv2.contourArea(c)>10000:
                        secondsfin=0
                        text = "Occupied"
                        center=[x+(x+w)/2,y+(y+w)/2]
                        img=frame;
                        cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)
                        if secondsfin>10:
                                backgroundSubtractor.apply(gray, learningRate=1)
                                cv2.rectangle(self.frame, (x, y), (x + w, y + h), color, 2)
                                cv2.putText(self.frame, "{}".format(cv2.contourArea(contour)), (x, y+h+20), cv2.FONT_HERSHEY_SIMPLEX, 0.7, color, 1)
                                cv2.putText(self.frame, "{} : {}".format(person.id, person.lastmoveTime), (x, y+20), cv2.FONT_HERSHEY_SIMPLEX, 0.8, color, 1)
        # draw the text and timestamp on the frame
        cv2.putText(frame, "Room Status: {}".format(text), (10, 20),
                cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 2)
        cv2.putText(frame, datetime.datetime.now().strftime("%A %d %B %Y %I:%M:%S%p"),
                (10, frame.shape[0] - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.35, (0, 0, 255), 1)
        endt = time.time()
        sec=endt-startt
        secondsfin=secondsfin+sec
        print sec
        if secondsfin>10:
                backgroundSubtractor.apply(gray, learningRate=1)
                secondsfin=0

        # show the frame and record if the user presses a key
        cv2.putText(frame, "Status: {}".format(secondsfin), (10, 20), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 140, 255), 1)
        cv2.imshow("Security Feed", frame)
##        cv2.imshow("Thresh", thresh)
##        cv2.imshow("Frame Delta", frameDelta)
        key = cv2.waitKey(1) & 0xFF

        # if the `q` key is pressed, break from the lop
        if key == ord("q"):
                break

# cleanup the camera and close any open windows
camera.release()
cv2.destroyAllWindows()
